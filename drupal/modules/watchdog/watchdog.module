<?php
// $Id: watchdog.module,v 1.165.2.1 2007/01/23 19:07:33 dries Exp $

/**
 * @file
 * System monitoring and logging for administrators.
 *
 * The watchdog module monitors your site and keeps a list of
 * recorded events containing usage and performance data, errors,
 * warnings, and similar operational information.
 *
 * @see watchdog().
 */

/**
 * Implementation of hook_help().
 */
function watchdog_help($section) {
  switch ($section) {
    case 'admin/help#watchdog':
      $output = '<p>'. t('The watchdog module monitors your system, capturing system events in a log to be reviewed by an authorized individual at a later time. This is useful for site administrators who want a quick overview of activities on their site. The logs also record the sequence of events, so it can be useful for debugging site errors.') .'</p>';
      $output .= '<p>'. t('The watchdog log is simply a list of recorded events containing usage data, performance data, errors, warnings and operational information. Administrators should check the watchdog report on a regular basis to ensure their site is working properly.') .'</p>';
      $output .= '<p>'. t('For more information please read the configuration and customization handbook <a href="@watchdog">Watchdog page</a>.', array('@watchdog' => 'http://drupal.org/handbook/modules/watchdog/')) .'</p>';
      return $output;
    case 'admin/logs':
      return '<p>'. t('The watchdog module monitors your web site, capturing system events in a log to be reviewed by an authorized individual at a later time. The watchdog log is simply a list of recorded events containing usage data, performance data, errors, warnings and operational information. It is vital to check the watchdog report on a regular basis as it is often the only way to tell what is going on.') .'</p>';
  }
}

/**
 * Implementation of hook_menu().
 */
function watchdog_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'admin/logs/watchdog', 'title' => t('Recent log entries'),
      'description' => t('View events that have recently been logged.'),
      'callback' => 'watchdog_overview',
      'weight' => -1);
    $items[] = array('path' => 'admin/logs/page-not-found', 'title' => t("Top 'page not found' errors"),
      'description' => t("View 'page not found' errors (404s)."),
      'callback' => 'watchdog_top',
      'callback arguments' => array('page not found'));
    $items[] = array('path' => 'admin/logs/access-denied', 'title' => t("Top 'access denied' errors"),
      'description' => t("View 'access denied' errors (403s)."),
      'callback' => 'watchdog_top',
      'callback arguments' => array('access denied'));
    $items[] = array('path' => 'admin/logs/event', 'title' => t('Details'),
      'callback' => 'watchdog_event',
      'type' => MENU_CALLBACK);
  }
  else {
    if (arg(0) == 'admin' && arg(1) == 'logs') {
      // Add the CSS for this module
      drupal_add_css(drupal_get_path('module', 'watchdog') .'/watchdog.css', 'module', 'all', FALSE);
    }
  }

  return $items;
}

/**
 * Implementation of hook_cron().
 *
 * Remove expired log messages and flood control events.
 */
function watchdog_cron() {
  db_query('DELETE FROM {watchdog} WHERE timestamp < %d', time() - variable_get('watchdog_clear', 604800));
  db_query('DELETE FROM {flood} WHERE timestamp < %d', time() - 3600);
}

/**
 * Implementation of hook_user().
 */
function watchdog_user($op, &$edit, &$user) {
  if ($op == 'delete') {
    db_query('UPDATE {watchdog} SET uid = 0 WHERE uid = %d', $user->uid);
  }
}

function watchdog_form_overview() {
  $names['all'] = t('all messages');
  foreach (_watchdog_get_message_types() as $type) {
    $names[$type] = t('!type messages', array('!type' => t($type)));
  }

  if (empty($_SESSION['watchdog_overview_filter'])) {
    $_SESSION['watchdog_overview_filter'] = 'all';
  }

  $form['filter'] = array(
    '#type' => 'select',
    '#title' => t('Filter by message type'),
    '#options' => $names,
    '#default_value' => $_SESSION['watchdog_overview_filter']
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Filter'));
  $form['#redirect'] = FALSE;

  return $form;
}
/**
 * Menu callback; displays a listing of log messages.
 */
function watchdog_overview() {
  $icons = array(WATCHDOG_NOTICE  => '',
                 WATCHDOG_WARNING => theme('image', 'misc/watchdog-warning.png', t('warning'), t('warning')),
                 WATCHDOG_ERROR   => theme('image', 'misc/watchdog-error.png', t('error'), t('error')));
  $classes = array(WATCHDOG_NOTICE => 'watchdog-notice', WATCHDOG_WARNING => 'watchdog-warning', WATCHDOG_ERROR => 'watchdog-error');

  $output = drupal_get_form('watchdog_form_overview');

  $header = array(
    ' ',
    array('data' => t('Type'), 'field' => 'w.type'),
    array('data' => t('Date'), 'field' => 'w.wid', 'sort' => 'desc'),
    array('data' => t('Message'), 'field' => 'w.message'),
    array('data' => t('User'), 'field' => 'u.name'),
    array('data' => t('Operations'))
  );

  $sql = "SELECT w.wid, w.uid, w.severity, w.type, w.timestamp, w.message, w.link, u.name FROM {watchdog} w INNER JOIN {users} u ON w.uid = u.uid";
  $tablesort = tablesort_sql($header);
  $type = $_SESSION['watchdog_overview_filter'];
  if ($type != 'all') {
    $result = pager_query($sql ." WHERE w.type = '%s'". $tablesort, 50, 0, NULL, $type);
  }
  else {
    $result = pager_query($sql . $tablesort, 50);
  }

  while ($watchdog = db_fetch_object($result)) {
    $rows[] = array('data' =>
      array(
        // Cells
        $icons[$watchdog->severity],
        t($watchdog->type),
        format_date($watchdog->timestamp, 'small'),
        l(truncate_utf8($watchdog->message, 56, TRUE, TRUE), 'admin/logs/event/'. $watchdog->wid, array(), NULL, NULL, FALSE, TRUE),
        theme('username', $watchdog),
        $watchdog->link,
      ),
      // Attributes for tr
      'class' => "watchdog-". preg_replace('/[^a-z]/i', '-', $watchdog->type) .' '. $classes[$watchdog->severity]
    );
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('No log messages available.'), 'colspan' => 6));
  }

  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 50, 0);

  return $output;
}

/**
 * Menu callback; generic function to display a page of the most frequent
 * watchdog events of a specified type.
 */
function watchdog_top($type) {

  $header = array(
    array('data' => t('Count'), 'field' => 'count', 'sort' => 'desc'),
    array('data' => t('Message'), 'field' => 'message')
  );

  $result = pager_query("SELECT COUNT(wid) AS count, message FROM {watchdog} WHERE type = '%s' GROUP BY message ". tablesort_sql($header), 30, 0, "SELECT COUNT(DISTINCT(message)) FROM {watchdog} WHERE type = '%s'", $type);

  while ($watchdog = db_fetch_object($result)) {
    $rows[] = array($watchdog->count, truncate_utf8($watchdog->message, 56, TRUE, TRUE));
  }

  if (!$rows) {
    $rows[] = array(array('data' => t('No log messages available.'), 'colspan' => 2));
  }

  $output  = theme('table', $header, $rows);
  $output .= theme('pager', NULL, 30, 0);

  return $output;
}

function theme_watchdog_form_overview($form) {
  return '<div class="container-inline">'. drupal_render($form) .'</div>';
}

function watchdog_form_overview_submit($form_id, $form_values) {
  $_SESSION['watchdog_overview_filter'] = $form_values['filter'];
}

/**
 * Menu callback; displays details about a log message.
 */
function watchdog_event($id) {
  $severity = array(WATCHDOG_NOTICE => t('notice'), WATCHDOG_WARNING => t('warning'), WATCHDOG_ERROR => t('error'));
  $output = '';
  $result = db_query('SELECT w.*, u.name, u.uid FROM {watchdog} w INNER JOIN {users} u ON w.uid = u.uid WHERE w.wid = %d', $id);
  if ($watchdog = db_fetch_object($result)) {
    $rows = array(
      array(
        array('data' => t('Type'), 'header' => TRUE),
        t($watchdog->type),
      ),
      array(
        array('data' => t('Date'), 'header' => TRUE),
        format_date($watchdog->timestamp, 'large'),
      ),
      array(
        array('data' => t('User'), 'header' => TRUE),
        theme('username', $watchdog),
      ),
      array(
        array('data' => t('Location'), 'header' => TRUE),
        l($watchdog->location, $watchdog->location),
      ),
      array(
        array('data' => t('Referrer'), 'header' => TRUE),
        l($watchdog->referer, $watchdog->referer),
      ),
      array(
        array('data' => t('Message'), 'header' => TRUE),
        $watchdog->message,
      ),
      array(
        array('data' => t('Severity'), 'header' => TRUE),
        $severity[$watchdog->severity],
      ),
      array(
        array('data' => t('Hostname'), 'header' => TRUE),
        $watchdog->hostname,
      ),
    );
    $attributes = array('class' => 'watchdog-event');
    $output = theme('table', array(), $rows, $attributes);
  }
  return $output;
}

function _watchdog_get_message_types() {
  $types = array();

  $result = db_query('SELECT DISTINCT(type) FROM {watchdog} ORDER BY type');
  while ($object = db_fetch_object($result)) {
    $types[] = $object->type;
  }

  return $types;
}
