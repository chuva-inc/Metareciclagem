<?php
// $Id: subscriptions.install,v 1.3.2.1.2.23 2008/09/13 11:03:28 salvis Exp $

/**
 * Implementation of hook_install().
 */
function subscriptions_install() {
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      db_query("CREATE TABLE {subscriptions} (
          sid int unsigned NOT NULL auto_increment,
          module varchar(64) default NULL,
          field varchar(32) default NULL,
          value varchar(237) default NULL,
          recipient_uid int NOT NULL,
          send_interval int default NULL,
          author_uid int NOT NULL,
          send_updates tinyint NOT NULL default 0,
          send_comments tinyint NOT NULL default 0,
          PRIMARY KEY (sid),
          KEY (module, field, value),
          KEY (recipient_uid)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */");
      db_query("CREATE TABLE {subscriptions_queue} (
          sqid int unsigned NOT NULL auto_increment,
          uid int default NULL,
          name varchar(60) default NULL,
          mail varchar(64) default NULL,
          language varchar(12) default NULL,
          module varchar(64) default NULL,
          field varchar(32) default NULL,
          value varchar(237) default NULL,
          author_uid int default NULL,
          send_interval int default NULL,
          digest tinyint default NULL,
          load_args varchar(255) NOT NULL default '',
          load_function varchar(60) NOT NULL default '',
          is_new tinyint default NULL,
          last_sent int unsigned NOT NULL default '0',
          PRIMARY KEY (sqid),
          KEY (load_args, load_function, uid)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */");
      db_query("CREATE TABLE {subscriptions_mail_edit} (
          mailkey varchar(255) NOT NULL,
          item_body TEXT,
          PRIMARY KEY (mailkey)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */");
      db_query("CREATE TABLE {subscriptions_user} (
          uid integer NOT NULL,
          digest tinyint NOT NULL default -1,
          send_interval int NOT NULL default -1,
          send_updates tinyint NOT NULL default -1,
          send_comments tinyint NOT NULL default -1,
          send_interval_visible tinyint NOT NULL default -1,
          send_updates_visible tinyint NOT NULL default -1,
          send_comments_visible tinyint NOT NULL default -1,
          autosub_on_post tinyint NOT NULL default -1,
          autosub_on_update tinyint NOT NULL default -1,
          autosub_on_comment tinyint NOT NULL default -1,
          send_self tinyint NOT NULL default -1,
          last_sent int unsigned NOT NULL default 0,
          PRIMARY KEY (uid)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */");
    break;
    case 'pgsql':
      db_query("CREATE TABLE {subscriptions} (
          sid serial,
          module varchar(64) default NULL,
          field varchar(32) default NULL,
          value varchar(237) default NULL,
          recipient_uid integer NOT NULL,
          send_interval integer default NULL,
          author_uid integer NOT NULL,
          send_updates smallint NOT NULL default 0,
          send_comments smallint NOT NULL default 0,
          PRIMARY KEY (sid)
        )");
      db_query("CREATE INDEX {subscriptions}_module_field_value_index ON {subscriptions} (module, field, value)");
      db_query("CREATE INDEX {subscriptions}_recipient_uid_index ON {subscriptions} (recipient_uid)");
      db_query("CREATE TABLE {subscriptions_queue} (
          sqid serial,
          uid integer default NULL,
          name varchar(60) default NULL,
          mail varchar(64) default NULL,
          language varchar(12) default NULL,
          module varchar(64) default NULL,
          field varchar(32) default NULL,
          value varchar(237) default NULL,
          author_uid integer default NULL,
          send_interval integer default NULL,
          digest smallint default NULL,
          load_args varchar(255) NOT NULL default '',
          load_function varchar(60) NOT NULL default '',
          is_new smallint default NULL,
          last_sent int_unsigned NOT NULL default 0,
          PRIMARY KEY (sqid)
        )");
      db_query("CREATE INDEX {subscriptions_queue}_load_args_load_function_uid_index ON {subscriptions_queue} (load_args, load_function, uid)");
      db_query("CREATE TABLE {subscriptions_mail_edit} (
          mailkey varchar(255) NOT NULL,
          item_body TEXT,
          PRIMARY KEY (mailkey)
        )");
      db_query("CREATE TABLE {subscriptions_user} (
          uid integer NOT NULL,
          digest smallint NOT NULL default -1,
          send_interval integer NOT NULL default -1,
          send_updates smallint NOT NULL default -1,
          send_comments smallint NOT NULL default -1,
          send_interval_visible smallint NOT NULL default -1,
          send_updates_visible smallint NOT NULL default -1,
          send_comments_visible smallint NOT NULL default -1,
          autosub_on_post smallint NOT NULL default -1,
          autosub_on_update smallint NOT NULL default -1,
          autosub_on_comment smallint NOT NULL default -1,
          send_self smallint NOT NULL default -1,
          last_sent int_unsigned NOT NULL default 0,
          PRIMARY KEY (uid)
        )");
      break;
  }
  db_query("INSERT INTO {subscriptions_user} (uid, digest, send_interval, send_updates, send_comments, send_interval_visible, send_updates_visible, send_comments_visible, autosub_on_post, autosub_on_update, autosub_on_comment, send_self) VALUES(". -DRUPAL_AUTHENTICATED_RID .", 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1)");
  db_query("INSERT INTO {subscriptions_user} (uid) SELECT uid FROM {users} WHERE uid > 0");
  subscriptions_update_8();   // convert 1.x-dev template variables if found
  
  include_once drupal_get_path('module', 'subscriptions') .'/subscriptions.install.inc';
  _subscriptions_install_information();
}

/**
 * Implementation of hook_uninstall().
 */
function subscriptions_uninstall() {
  if (db_table_exists('subscriptions')) {
    db_query("DROP TABLE {subscriptions}");
  }
  if (db_table_exists('subscriptions_old')) {
    db_query("DROP TABLE {subscriptions_old}");           // old backup from 5.x-1.x
  }
  if (db_table_exists('subscriptions_holding')) {
    db_query("DROP TABLE {subscriptions_holding}");       // old left-over from 5.x-1.x
  }
  if (db_table_exists('subscriptions_holding_old')) {
    db_query("DROP TABLE {subscriptions_holding_old}");   // old backup from 5.x-1.x
  }
  if (db_table_exists('subscriptions_queue')) {
    db_query("DROP TABLE {subscriptions_queue}");
  }
  if (db_table_exists('subscriptions_sent')) {            // old left-over from first
    db_query("DROP TABLE {subscriptions_sent}");          // incarnation of 5.x-2.0
  }
  if (db_table_exists('subscriptions_mail_edit')) {
    db_query("DROP TABLE {subscriptions_mail_edit}");
  }
  db_query("DELETE FROM {mail_edit} WHERE mailkey LIKE 'subscriptions-%'");
  if (db_table_exists('subscriptions_user')) {
    db_query("DROP TABLE {subscriptions_user}");
  }

  variable_del('subscriptions_avoid_empty_subscribe_links');
  variable_del('subscriptions_blocked_content_types');
  variable_del('subscriptions_blocked_nodes');
  variable_del('subscriptions_cron_percent');
  variable_del('subscriptions_form_expanded');
  variable_del('subscriptions_form_in_block');
  variable_del('subscriptions_form_link_only');
  variable_del('subscriptions_generate_full_node');
  variable_del('subscriptions_link_teaser');
  variable_del('subscriptions_number_of_mails');
  variable_del('subscriptions_omitted_taxa');
  variable_del('subscriptions_restricted_taxa');
  variable_del('subscriptions_send_intervals');
  variable_del('subscriptions_show_by_author_options');
  variable_del('subscriptions_site_mail');
  variable_del('subscriptions_static_content_types');
  variable_del('subscriptions_unlisted_content_types');
  variable_del('subscriptions_watchgood');
  variable_del('subscriptions_watchstats');

  // also remove legacy 5.x-1.9(-dev) variables:
  variable_del('subscriptions_allow_vid');
  variable_del('subscriptions_autoset');
  variable_del('subscriptions_email_body');
  variable_del('subscriptions_email_subject');
  variable_del('subscriptions_sendself');
  variable_del('subscriptions_teaser');
  variable_del('subscriptions_testpost');
  variable_del('subscriptions_usecron');
  variable_del('subscriptions_usersmenu');
}

/**
 * Database update function 1 for first incarnation of 5.x-2.0.
 */
function subscriptions_update_1() {
  $ret = array();

  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("CREATE TABLE {subscriptions_mail_edit} (
          mailkey varchar(255) NOT NULL,
          item_body TEXT,
          PRIMARY KEY (mailkey)
         ) /*!40100 DEFAULT CHARACTER SET utf8 */");
      $ret[] = update_sql("ALTER TABLE {subscriptions} ADD send_interval int(10) unsigned default '0' NOT NULL");
      break;
    case 'pgsql':
      $ret[] = update_sql("CREATE TABLE {subscriptions_mail_edit} (
          mailkey varchar(255) NOT NULL,
          item_body TEXT,
          PRIMARY KEY (mailkey)
        )");
      db_add_column($ret, 'subscriptions', 'send_interval', 'integer', array('default' => 0, 'not null' => TRUE));
      break;
  }

  if (variable_get('subscriptions_usecron', 0)) {
    $ret[] = update_sql("UPDATE {subscriptions} SET send_interval = 1");
  }
  variable_del('subscriptions_usecron');
  return $ret;
}

/**
 * Database update dummy function 2, left-over from first incarnation of 5.x-2.0.
 */
function subscriptions_update_2() {

  // intentionally left empty

  return array();
}

/**
 * Database update function 3 for 5.x-2.0 rewrite.
 */
function subscriptions_update_3() {
  $ret = array();
  $t = get_t();

  if (db_table_exists('subscriptions_holding')) {
    db_query("DROP TABLE {subscriptions_holding}");       // old left-over from 5.x-1.x
  }

  if (db_table_exists('subscriptions_sent')) {                // old left-over from first
    $ret[] = update_sql("DROP TABLE {subscriptions_sent}");   // incarnation of 5.x-2.0
  }
  
  if (db_table_exists('subscriptions_old')) {
    db_query("DROP TABLE {subscriptions_old}");
  }
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql('RENAME TABLE {subscriptions} TO {subscriptions_old}');
      $ret[] = update_sql("CREATE TABLE {subscriptions} (
          sid int unsigned NOT NULL auto_increment,
          module varchar(64) default NULL,
          field varchar(32) default NULL,
          value varchar(237) default NULL,
          recipient_uid int NOT NULL,
          send_interval int default NULL,
          author_uid int NOT NULL,
          send_updates tinyint NOT NULL default 0,
          send_comments tinyint NOT NULL default 0,
          PRIMARY KEY (sid),
          KEY (module, field, value),
          KEY (recipient_uid)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */");
      break;

    case 'pgsql':
      $ret[] = 'ALTER TABLE {subscriptions} RENAME TO {subscriptions_old}';
      $ret[] = update_sql("CREATE TABLE {subscriptions} (
          sid serial,
          module varchar(255) default NULL,
          field varchar(255) default NULL,
          value varchar(255) default NULL,
          recipient_uid integer NOT NULL,
          send_interval integer default NULL,
          author_uid integer NOT NULL,
          send_updates smallint NOT NULL default 0,
          send_comments smallint NOT NULL default 0,
          PRIMARY KEY (sid)
        )");
      $ret[] = update_sql("CREATE INDEX {subscriptions}_module_field_value_index ON {subscriptions} (module, field, value)");
      $ret[] = update_sql("CREATE INDEX {subscriptions}_recipient_uid_index ON {subscriptions} (recipient_uid)");
      break;
  }
  
  $ret[] = update_sql("INSERT INTO {subscriptions}
      (module, field, value, recipient_uid, send_interval, author_uid, send_updates, send_comments)
      SELECT 'node', 'nid', sid, uid, send_interval, -1, 0, 1
        FROM {subscriptions_old}
        WHERE stype = 'node'");
  $ret[] = update_sql("INSERT INTO {subscriptions}
      (module, field, value, recipient_uid, send_interval, author_uid, send_updates, send_comments)
      SELECT 'node', 'tid', sid, uid, send_interval, -1, 0, 1
        FROM {subscriptions_old}
        WHERE stype = 'taxa'");
  $ret[] = update_sql("INSERT INTO {subscriptions}
      (module, field, value, recipient_uid, send_interval, author_uid, send_updates, send_comments)
      SELECT 'node', 'type', SUBSTRING(stype FROM 5), uid, send_interval, -1, 0, 1
        FROM {subscriptions_old}
        WHERE stype LIKE 'type%'");
  $ret[] = update_sql("UPDATE {subscriptions} SET send_interval = 1 WHERE send_interval < 1");

  $ret[] = db_query("DROP TABLE {subscriptions_old}");

  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("CREATE TABLE {subscriptions_queue} (
          sqid int unsigned NOT NULL auto_increment,
          uid int default NULL,
          name varchar(60) default NULL,
          mail varchar(64) default NULL,
          language varchar(12) default NULL,
          module varchar(64) default NULL,
          field varchar(32) default NULL,
          value varchar(237) default NULL,
          author_uid int default NULL,
          send_interval int default NULL,
          digest tinyint default NULL,
          load_args varchar(255) NOT NULL default '',
          load_function varchar(60) NOT NULL default '',
          last_sent int unsigned NOT NULL default '0',
          PRIMARY KEY (sqid),
          KEY (load_args, load_function, uid)
         ) /*!40100 DEFAULT CHARACTER SET utf8 */");
      $ret[] = update_sql("CREATE TABLE {subscriptions_user} (
          uid integer NOT NULL,
          digest tinyint NOT NULL default 0,
          last_sent int unsigned NOT NULL default 0,
          PRIMARY KEY (uid)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */");
      break;

    case 'pgsql':
      $ret[] = update_sql("CREATE TABLE {subscriptions_queue} (
          sqid serial,
          uid integer default NULL,
          name varchar(60) default NULL,
          mail varchar(64) default NULL,
          language varchar(12) default NULL,
          module varchar(64) default NULL,
          field varchar(32) default NULL,
          value varchar(237) default NULL,
          author_uid integer default NULL,
          send_interval integer default NULL,
          digest smallint default NULL,
          load_args varchar(255) NOT NULL default '',
          load_function varchar(60) NOT NULL default '',
          last_sent int_unsigned NOT NULL default 0,
          PRIMARY KEY (sqid)
        )");
      $ret[] = update_sql("CREATE INDEX {subscriptions_queue}_load_args_load_function_uid_index ON {subscriptions_queue} (load_args, load_function, uid)");
      $ret[] = update_sql("CREATE TABLE {subscriptions_user} (
          uid integer NOT NULL,
          digest smallint NOT NULL default 0,
          last_sent int_unsigned NOT NULL default 0,
          PRIMARY KEY (uid)
        )");
      break;
  }
  $ret[] = update_sql("INSERT INTO {subscriptions_user} (uid) SELECT uid FROM {users} WHERE uid > 0");

  include_once drupal_get_path('module', 'subscriptions') .'/subscriptions.install.inc';
  _subscriptions_install_information();
  return $ret;
}

/**
 * Database update function 4 for 5.x-2.0 rewrite.
 */
function subscriptions_update_4() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {subscriptions_user} ADD send_interval int NOT NULL default -1 AFTER digest");
      $ret[] = update_sql("ALTER TABLE {subscriptions_user} ADD send_updates tinyint NOT NULL default -1 AFTER send_interval");
      $ret[] = update_sql("ALTER TABLE {subscriptions_user} ADD send_comments tinyint NOT NULL default -1 AFTER send_updates");
      break;

    case 'pgsql':
      db_add_column($ret, 'subscriptions_user', 'send_interval', 'integer', array('default' => -1, 'not null' => TRUE));
      db_add_column($ret, 'subscriptions_user', 'send_updates', 'smallint', array('default' => -1, 'not null' => TRUE));
      db_add_column($ret, 'subscriptions_user', 'send_comments', 'smallint', array('default' => -1, 'not null' => TRUE));
      break;
  }
  $ret[] = update_sql("DELETE FROM {subscriptions_user} WHERE uid = 0");
  $ret[] = update_sql("UPDATE {subscriptions_user} SET digest = -1");
  $ret[] = update_sql("INSERT INTO {subscriptions_user} (uid, digest, send_interval, send_updates, send_comments) VALUES(". -DRUPAL_AUTHENTICATED_RID .", 0, 1, 0, 0)");
  return $ret;
}

/**
 * Database update function 5 for 5.x-2.0 rewrite.
 */
function subscriptions_update_5() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {subscriptions_user} ADD send_interval_visible tinyint NOT NULL default -1 AFTER send_comments");
      $ret[] = update_sql("ALTER TABLE {subscriptions_user} ADD send_updates_visible tinyint NOT NULL default -1 AFTER send_interval_visible");
      $ret[] = update_sql("ALTER TABLE {subscriptions_user} ADD send_comments_visible tinyint NOT NULL default -1 AFTER send_updates_visible");
      $ret[] = update_sql("ALTER TABLE {subscriptions_queue} ADD is_new tinyint AFTER load_function");
      break;

    case 'pgsql':
      db_add_column($ret, 'subscriptions_user', 'send_interval_visible', 'smallint', array('default' => -1, 'not null' => TRUE));
      db_add_column($ret, 'subscriptions_user', 'send_updates_visible', 'smallint', array('default' => -1, 'not null' => TRUE));
      db_add_column($ret, 'subscriptions_user', 'send_comments_visible', 'smallint', array('default' => -1, 'not null' => TRUE));
      db_add_column($ret, 'subscriptions_queue', 'is_new', 'smallint');
      break;
  }
  $ret[] = update_sql("UPDATE {subscriptions_user} SET send_interval_visible = 0, send_updates_visible = 0, send_comments_visible = 0 WHERE uid = ". -DRUPAL_AUTHENTICATED_RID);
  return $ret;
}

/**
 * Database update function 6 for 5.x-2.0 rewrite.
 */
function subscriptions_update_6() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {subscriptions_user} ADD autosub_on_post tinyint NOT NULL default -1 AFTER send_comments_visible");
      $ret[] = update_sql("ALTER TABLE {subscriptions_user} ADD autosub_on_update tinyint NOT NULL default -1 AFTER autosub_on_post");
      $ret[] = update_sql("ALTER TABLE {subscriptions_user} ADD autosub_on_comment tinyint NOT NULL default -1 AFTER autosub_on_update");
      $ret[] = update_sql("ALTER TABLE {subscriptions_user} ADD send_self tinyint NOT NULL default -1 AFTER autosub_on_comment");
      break;

    case 'pgsql':
      db_add_column($ret, 'subscriptions_user', 'autosub_on_post', 'smallint', array('default' => -1, 'not null' => TRUE));
      db_add_column($ret, 'subscriptions_user', 'autosub_on_update', 'smallint', array('default' => -1, 'not null' => TRUE));
      db_add_column($ret, 'subscriptions_user', 'autosub_on_comment', 'smallint', array('default' => -1, 'not null' => TRUE));
      db_add_column($ret, 'subscriptions_user', 'send_self', 'smallint', array('default' => -1, 'not null' => TRUE));
      break;
  }
  return $ret;
}

/**
 * Database update function 7 for 5.x-2.0 rewrite.
 */
function subscriptions_update_7() {
  // Multi-part update to move subscriptions_auto and subscriptions_sendself from {users} to {subscriptions_user}
  if (!isset($_SESSION['subscriptions_update_7'])) {
    $_SESSION['subscriptions_update_7'] = 0;
    $_SESSION['subscriptions_update_7_max'] = db_result(db_query('SELECT MAX(uid) FROM {users}'));
  }

  include_once './'. drupal_get_path('module', 'user') .'/user.module';

  $limit = 50;

  $result = db_query_range("SELECT uid FROM {users} WHERE uid > %d ORDER BY uid ASC", $_SESSION['subscriptions_update_7'], 0, $limit);
  while ($usr = db_fetch_object($result)) {
    $account = user_load(array('uid' => $usr->uid));
    $settings = array();
    if (isset($account->subscriptions_auto)) {
      $settings['autosub_on_post = %d'] = $account->subscriptions_auto;
      $settings['autosub_on_update = %d'] = $account->subscriptions_auto;
      $settings['autosub_on_comment = %d'] = $account->subscriptions_auto;
    }
    if (isset($account->subscriptions_sendself)) {
      $settings['send_self = %d'] = $account->subscriptions_sendself;
    }
    if (!empty($settings)) {
      $sql = "UPDATE {subscriptions_user} SET ". implode(', ', array_keys($settings)) ." WHERE uid = %d";
      $settings[] = $account->uid;
      db_query($sql, array_values($settings));
      user_save($account, array('subscriptions_auto' => NULL, 'subscriptions_sendself' => NULL));
    }
    
    $_SESSION['subscriptions_update_7'] = $usr->uid;
  }

  if ($_SESSION['subscriptions_update_7'] == $_SESSION['subscriptions_update_7_max']) {
    variable_del('subscriptions_sendself');
    variable_del('subscriptions_autoset');
    unset($_SESSION['subscriptions_update_7']);
    unset($_SESSION['subscriptions_update_7_max']);
    return array();
  }
  return array('#finished' => $_SESSION['subscriptions_update_7'] / $_SESSION['subscriptions_update_7_max']);
}

/**
 * Database update function 8: Convert 5.x-1.x-dev email templates. 
 * (also called by subscriptions_install()!)
 */
function subscriptions_update_8() {
  $ret = array();
  foreach (array('subject', 'body') as $field) {
    $template = variable_get("subscriptions_email_$field", '');
    if (!empty($template)) {
      $template = strtr($template, array(
        '@name' => '!name',
        '@type' => '!node_type',
        '@site' => '!site',
        '@title' => '!title',
        '@teaser' => '!teaser',
      ));
      variable_set("subscriptions_email_$field", $template);
      $updated = TRUE;
    }
  }
  if (!empty($updated)) {
    $t = get_t();
    $ret[] = array(
      'success' => TRUE,
      'query' => $t('Your email template variables were updated.'),
    );
  }
  return $ret;
}
